# User code developer task
javacodewriter_task:
  description: >
    You are a skilled Java microservice architect. Based on the provided Jira user story, and the business rule your task is to:

    1. Analyze the user story to identify the functionality, data requirements, endpoints, and acceptance criteria.
    2. Consider the Mainframe business rule to understand the business context
    2. Generate a complete Java microservice that meets the specifications in the user story.
    3. Implement a REST API using Spring Boot, with well-structured layers: 
        - **Controller**: Expose endpoints to handle HTTP requests as described in the story.
        - **Service**: Business logic layer that processes and coordinates the operations.
        - **Repository**: Data access layer for CRUD operations if a database is specified.
    4. If the user story requires a database, create the necessary **Entity** classes and define repository interfaces using Spring Data JPA.
    5. Implement error handling, input validation, and any additional utility classes or configurations needed.
    6. Follow best practices, including Java naming conventions, encapsulation, and meaningful comments.

    ### Example Structure of the Microservice:

    - **Controller Class**: Define REST endpoints with mappings as described.
    - **Service Class**: Include methods for the main business logic.
    - **Repository Class**: Use Spring Data JPA for database interactions, if applicable.
    - **Data Models**: Define entity classes with JPA annotations if a database is involved.
    - **Configuration**: Configure properties like application.yml, if relevant.

    **Input**: 

    User Story:
     {topic}

    Business Rules:
      Credit Card Bill Payment from Savings/Current Account with Conditional Balance Check

      Pre-Conditions
      User has a Savings Account and a Current Account.
      User has a Credit Card Bill with a Due Amount and a Minimum Bill Pay Amount.
      System has permissions to access account balances and perform transactions.
      Steps
      Check Account Balances

      Retrieve the balance of the Savings Account (savings_balance).
      Retrieve the balance of the Current Account (current_balance).
      Determine Payment Account

      Compare savings_balance and current_balance.
      Select the account with the higher balance as the primary_account for the transaction.
      Check Due Amount and Deduct Funds

      If the primary_account balance is greater than or equal to the Due Amount:
      Deduct the Due Amount from primary_account.
      Record a transaction for the Credit Card Bill Payment for the Due Amount.
      Handle Insufficient Balance in Both Accounts

      If neither the Savings nor Current Account has a sufficient balance to cover the Due Amount:
      Check if the primary_account balance is greater than or equal to the Minimum Bill Pay Amount.
      If yes:
      Deduct the Minimum Bill Pay Amount from primary_account.
      Record a transaction for the Credit Card Bill Payment for the Minimum Bill Pay Amount.
      If no:
      Record an Insufficient Funds status and notify the user.
      Post-Transaction Update

      Update the balances of Savings and Current Account in the system.
      Notify the user of the transaction status:
      Success: Indicate amount paid and account used.
      Insufficient Funds: Notify of failure to meet even the minimum payment.

  expected_output: >
    Implement all functionality, acceptance criteria, and endpoints from the user story.
    Use annotations like @RestController, @Service, and @Repository as needed.
    Include meaningful comments and JavaDoc for methods to clarify functionality.
  agent: javacodewriter


# User unit test case developer task
javaunittestcasewriter_task:
  description: >
    You are a Java unit testing expert tasked with generating JUnit test cases for a Spring Boot microservice, based on the original Jira user story requirements and the Java code already generated from it. 
    Your goal is to verify that all functionalities meet the acceptance criteria.

    ### Instructions

    1. **Retrieve Generated Java Code from Memory**:
      - Access the Java classes and methods previously generated from the Jira user story.
      - Reference the specific functionalities, including Controller, Service, Repository, and any utility classes.

    2. **Define Test Coverage**:
      - For each functionality described in the user story, create detailed unit test cases to ensure they meet the specified acceptance criteria.
      - Ensure test cases are structured to cover all possible input scenarios:
          - **Happy Path**: Typical valid inputs and expected outputs.
          - **Edge Cases**: Boundary or extreme values.
          - **Error Handling**: Invalid inputs and exceptions.
      - For database interactions (Repository), mock data where necessary.
      - For service and controller methods, mock dependencies and focus on verifying the business logic.

    3. **Testing Framework**:
      - Use JUnit 5 for writing test cases.
      - Use Mockito for mocking dependencies (e.g., service or repository classes).
      - Structure the test classes to follow standard Java conventions:
        - **Controller Tests**: Verify HTTP request mappings, response status, and data returned.
        - **Service Tests**: Test business logic, including conditional paths and expected data processing.
        - **Repository Tests**: Use mock data or in-memory databases to test data retrieval and storage.

    4. **Expected Output Format**:
      - Write the JUnit test cases for each method based on the specific details in the user story and Java code.
      - Each test should include descriptive names, clear Arrange-Act-Assert (AAA) format, and appropriate comments.
      - Ensure the test cases are well-structured and follow best practices for test organization and naming.

  expected_output: >
    Create JUnit test cases for each component in the generated code, aligned with the user story acceptance criteria.
  agent: javaunittestcasewriter


